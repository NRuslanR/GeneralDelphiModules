unit TestDBTableReplicationRequest;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, SysUtils, Classes, DBTableReplicationOptions, 
  DBTableReplicationRequest;
type
  // Test methods for class TDBTableReplicationRequest
  
  TestTDBTableReplicationRequest = class(TTestCase)
  private

    procedure RunSourceTableIsEmptyUseCase;
    procedure RunTargetTableIsEmptyUseCase;
    procedure RunSourceTableEqualsTargetTableUseCase;
    procedure RunSourceTablePropertyAssignEmptyStringUseCase;
    procedure RunSourceTablePropertyAssignTargetTableStringUseCase;

  published

    procedure TestCreateDefault;
    procedure TestSourceTableIsEmptyUseCase;
    procedure TestTargetTableIsEmptyUseCase;
    procedure TestSourceTableEqualsTargetTableUseCase;
    procedure TestSourceTablePropertyAssignEmptyStringUseCase;
    procedure TestSourceTablePropertyAssignTargetTableStringUseCase;
    
  end;
  // Test methods for class TDBTableReplicationRequests
  
  TestTDBTableReplicationRequests = class(TTestCase)
  strict private
    FDBTableReplicationRequests: TDBTableReplicationRequests;
  public
    procedure SetUp; override;
    procedure TearDown; override;

    procedure TestAddReplicationRequests;

    procedure RunDuplicateReplicationRequestAddingUseCase;
    procedure RunInListReplicationRequestFailedChangingUseCase;
    
  published
    procedure TestFindReplicationRequestBySourceTargetTables;
    procedure TestIsReplicationRequestExists;
    procedure TestAdd;
    procedure TestRemove;
    procedure TestRemoveBySourceTargetTables;
    procedure TestExtractBySourceTargetTables;
    procedure TestExtract;
    procedure TestDuplicateReplicationRequestAddingUseCase;
    procedure TestInListReplicationRequestFailedChangingUseCase;
    procedure TestExtractedReplicationRequestSuccessChangingUseCase;
    
  end;
  // Test methods for class TDBTableCompositeReplicationRequest
  
  TestTDBTableCompositeReplicationRequest = class(TTestCase)
  public

  published
    procedure TestAddReferencedTableReplicationRequest;
  end;
  // Test methods for class TDBTableCompositeReplicationRequests
  
  TestTDBTableCompositeReplicationRequests = class(TTestCase)
  strict private
    FDBTableCompositeReplicationRequests: TDBTableCompositeReplicationRequests;
  public
    procedure SetUp; override;
    procedure TearDown; override;

    procedure RunInListReplicationRequestFailedChangingUseCase;
    procedure RunDuplicateReferencedReplicationRequestAddingUseCase;
    
  published
    procedure TestFindReplicationRequestBySourceTargetTables;
    procedure TestInListReplicationRequestFailedChangingUseCase;
    procedure TestDuplicateReferencedReplicationRequestAddingUseCase;
  end;

implementation

procedure TestTDBTableReplicationRequest.RunSourceTableEqualsTargetTableUseCase;
var ReplicationRequest: TDBTableReplicationRequest;
begin

  ReplicationRequest := TDBTableReplicationRequest.CreateDefault('A', 'A');
  
end;

procedure TestTDBTableReplicationRequest.RunSourceTableIsEmptyUseCase;
begin

  TDBTableReplicationRequest.CreateDefault('      ', 'B');

end;

procedure TestTDBTableReplicationRequest.
  RunSourceTablePropertyAssignEmptyStringUseCase;
begin

  with TDBTableReplicationRequest.CreateDefault('A', 'B') do begin

    SourceTable := '    ';
    
  end;

end;

procedure TestTDBTableReplicationRequest.
  RunSourceTablePropertyAssignTargetTableStringUseCase;
begin

  with TDBTableReplicationRequest.CreateDefault('A', 'B') do begin

    SourceTable := 'B';
    
  end;

end;

procedure TestTDBTableReplicationRequest.RunTargetTableIsEmptyUseCase;
begin

  TDBTableReplicationRequest.CreateDefault('A', '    ');
  
end;

procedure TestTDBTableReplicationRequest.TestCreateDefault;
var
  ReturnValue: TDBTableReplicationRequest;
  DefaultReplicationOptions: IDBTableReplicationOptions;
  TargetTable: string;
  SourceTable: string;
begin

  ReturnValue := TDBTableReplicationRequest.CreateDefault('A', 'B');

  DefaultReplicationOptions := TDBTableReplicationOptions.Default;
  
  CheckEquals('A', ReturnValue.SourceTable);
  CheckEquals('B', ReturnValue.TargetTable);

  CheckEquals(
    DefaultReplicationOptions.CreateTargetTableIfNotExists,
    ReturnValue.Options.CreateTargetTableIfNotExists
  );

  CheckEquals(
    DefaultReplicationOptions.ReplicateSourceTableIntegrityConstraints,
    ReturnValue.Options.ReplicateSourceTableIntegrityConstraints
  );

  CheckEquals(
    DefaultReplicationOptions.ChangeTargetTableColumnTypes,
    ReturnValue.Options.ChangeTargetTableColumnTypes
  );

  CheckEquals(
    DefaultReplicationOptions.AddNonExistentColumnsToTargetTable,
    ReturnValue.Options.AddNonExistentColumnsToTargetTable
  );

  CheckEquals(
    DefaultReplicationOptions.TruncateTargetTable,
    ReturnValue.Options.TruncateTargetTable
  );

end;

procedure TestTDBTableReplicationRequests.
  RunDuplicateReplicationRequestAddingUseCase;
begin

  TestAddReplicationRequests;

  FDBTableReplicationRequests.Add(
    TDBTableReplicationRequest.CreateDefault('E', 'F')
  );
  
end;

procedure TestTDBTableReplicationRequests.
  RunInListReplicationRequestFailedChangingUseCase;
var ReplicationRequest: TDBTableReplicationRequest;
begin

  TestAddReplicationRequests;

  ReplicationRequest :=
    FDBTableReplicationRequests.
      FindReplicationRequestBySourceTargetTables('C', 'D');

  ReplicationRequest.SourceTable := 'A';
  ReplicationRequest.TargetTable := 'B';
  
end;

procedure TestTDBTableReplicationRequests.SetUp;
begin

  FDBTableReplicationRequests := TDBTableReplicationRequests.Create;

end;

procedure TestTDBTableReplicationRequests.TearDown;
begin
  FDBTableReplicationRequests.Free;
  FDBTableReplicationRequests := nil;
end;

procedure TestTDBTableReplicationRequests.
  TestFindReplicationRequestBySourceTargetTables;
var
  ReturnValue: TDBTableReplicationRequest;
  TargetTable: string;
  SourceTable: string;
begin

  TestAddReplicationRequests;

  ReturnValue :=
    FDBTableReplicationRequests.
      FindReplicationRequestBySourceTargetTables('C', 'D');

  CheckNotNull(ReturnValue);
  CheckTrue(ReturnValue.AreSourceTargetTablesEquals('C', 'D'));

end;

procedure TestTDBTableReplicationRequests.
  TestInListReplicationRequestFailedChangingUseCase;
begin

  CheckException(
    RunInListReplicationRequestFailedChangingUseCase,
    TDBTableReplicationRequestException
  );
  
end;

procedure TestTDBTableReplicationRequests.TestIsReplicationRequestExists;
var
  ReturnValue: Boolean;
  TargetTable: string;
  SourceTable: string;
begin

  TestAddReplicationRequests;

  CheckTrue(FDBTableReplicationRequests.IsReplicationRequestExists('E', 'F'));
  CheckFalse(FDBTableReplicationRequests.IsReplicationRequestExists('G', 'H'));
  
end;

procedure TestTDBTableReplicationRequests.TestAdd;
begin

  TestAddReplicationRequests;
  
end;

procedure TestTDBTableReplicationRequests.TestAddReplicationRequests;
var
  ReturnValue: Integer;
  ReplicationRequest: TDBTableReplicationRequest;
  ReplicationOptions: TDBTableReplicationOptions;
begin

  ReplicationRequest := TDBTableReplicationRequest.CreateDefault('A', 'B');
  
  ReturnValue := FDBTableReplicationRequests.Add(ReplicationRequest);

  CheckEquals(0, ReturnValue);

  ReplicationOptions := TDBTableReplicationOptions.Create;

  ReplicationOptions.CreateTargetTableIfNotExists := False;
  ReplicationOptions.ReplicateSourceTableIntegrityConstraints := True;
  ReplicationOptions.ChangeTargetTableColumnTypes := True;
  ReplicationOptions.AddNonExistentColumnsToTargetTable := False;
  ReplicationOptions.TruncateTargetTable := False;

  ReplicationRequest := TDBTableReplicationRequest.Create('C', 'D', ReplicationOptions);

  ReturnValue := FDBTableReplicationRequests.Add(ReplicationRequest);

  CheckEquals(1, ReturnValue);

  ReplicationRequest := TDBTableReplicationRequest.CreateDefault('E', 'F');

  ReturnValue := FDBTableReplicationRequests.Add(ReplicationRequest);

  CheckEquals(2, ReturnValue);

  CheckEquals(3, FDBTableReplicationRequests.Count);
  
end;

procedure TestTDBTableReplicationRequests.
  TestDuplicateReplicationRequestAddingUseCase;
begin

  CheckException(
    RunDuplicateReplicationRequestAddingUseCase,
    TDBTableReplicationRequestException
  );
  
end;

procedure TestTDBTableReplicationRequests.TestRemove;
var
  ReplicationRequest: TDBTableReplicationRequest;
  OldRequestCount: Integer;
begin

  TestAddReplicationRequests;

  OldRequestCount := FDBTableReplicationRequests.Count;

  ReplicationRequest :=
    FDBTableReplicationRequests.FindReplicationRequestBySourceTargetTables(
      'C', 'D'
    );

  CheckNotNull(ReplicationRequest);

  FDBTableReplicationRequests.Remove(ReplicationRequest);

  CheckEquals(OldRequestCount - 1, FDBTableReplicationRequests.Count);

  ReplicationRequest :=
    FDBTableReplicationRequests.
      FindReplicationRequestBySourceTargetTables('C', 'D');

  CheckNull(ReplicationRequest);

end;

procedure TestTDBTableReplicationRequests.TestRemoveBySourceTargetTables;
var
  ReplicationRequest: TDBTableReplicationRequest;
  OldRequestCount: Integer;
begin

  TestAddReplicationRequests;

  OldRequestCount := FDBTableReplicationRequests.Count;

  FDBTableReplicationRequests.RemoveBySourceTargetTables('C', 'D');

  CheckEquals(OldRequestCount - 1, FDBTableReplicationRequests.Count);

  ReplicationRequest :=
    FDBTableReplicationRequests.
      FindReplicationRequestBySourceTargetTables('C', 'D');

  CheckNull(ReplicationRequest);

end;

procedure TestTDBTableReplicationRequests.TestExtract;
var
  ReturnValue: TDBTableReplicationRequest;
  ReplicationRequest: TDBTableReplicationRequest;
  OldRequestCount: Integer;
begin

  TestAddReplicationRequests;

  ReplicationRequest :=
    FDBTableReplicationRequests.FindReplicationRequestBySourceTargetTables(
      'E', 'F'
    );

  CheckNotNull(ReplicationRequest);

  OldRequestCount := FDBTableReplicationRequests.Count;

  ReturnValue := FDBTableReplicationRequests.Extract(ReplicationRequest);

  CheckSame(ReplicationRequest, ReturnValue);
  CheckEquals(OldRequestCount - 1, FDBTableReplicationRequests.Count);

  ReplicationRequest :=
    FDBTableReplicationRequests.FindReplicationRequestBySourceTargetTables(
      'E', 'F'
    );

  CheckNull(ReplicationRequest);

end;

procedure TestTDBTableReplicationRequests.TestExtractBySourceTargetTables;
var
  ReturnValue: TDBTableReplicationRequest;
  ReplicationRequest: TDBTableReplicationRequest;
  OldRequestCount: Integer;
begin

  TestAddReplicationRequests;

  OldRequestCount := FDBTableReplicationRequests.Count;

  ReturnValue :=
    FDBTableReplicationRequests.ExtractBySourceTargetTables('C', 'D');

  CheckNotNull(ReturnValue);
  CheckTrue(
    (ReturnValue.SourceTable = 'C') and (ReturnValue.TargetTable = 'D')
  );

  CheckEquals(OldRequestCount - 1, FDBTableReplicationRequests.Count);

  ReplicationRequest :=
    FDBTableReplicationRequests.FindReplicationRequestBySourceTargetTables(
      'C', 'D'
    );

  CheckNull(ReplicationRequest);

end;

procedure TestTDBTableReplicationRequests.
  TestExtractedReplicationRequestSuccessChangingUseCase;
begin

  TestAddReplicationRequests;

  with FDBTableReplicationRequests.ExtractBySourceTargetTables('C', 'D')
  do begin

    SourceTable := 'A';
    TargetTable := 'B';
    
  end;
  
end;

procedure TestTDBTableCompositeReplicationRequest.TestAddReferencedTableReplicationRequest;
var
  ReferencedTableReplicationRequest: TDBTableReplicationRequest;
  CompositeRequest: TDBTableCompositeReplicationRequest;
  ReferencedRequest: TDBTableReplicationRequest;
  CompositeReferencedRequest: TDBTableCompositeReplicationRequest;
  CompositeReferencedOptions: TDBTableCompositeReplicationOptions;
begin

  CompositeRequest :=
    TDBTableCompositeReplicationRequest.CreateDefault('A', 'B')
    as TDBTableCompositeReplicationRequest;

  ReferencedRequest := TDBTableReplicationRequest.CreateDefault('A1', 'B1');

  CompositeRequest.AddReferencedTableReplicationRequest(ReferencedRequest);

  CompositeReferencedOptions := TDBTableCompositeReplicationOptions.Create;

  CompositeReferencedOptions.CreateTargetTableIfNotExists := True;
  CompositeReferencedOptions.ReplicateReferencedTablesWithReferencingTableOptions := False;
  CompositeReferencedOptions.ReplicateSourceTableIntegrityConstraints := False;
  CompositeReferencedOptions.TruncateTargetTable := True;

  CompositeReferencedRequest :=
    TDBTableCompositeReplicationRequest.Create(
      'A2', 'B2', CompositeReferencedOptions
    );

  CompositeReferencedRequest.AddReferencedTableReplicationRequest(
    TDBTableReplicationRequest.CreateDefault('A21', 'B21')
  );

  CompositeReferencedRequest.AddReferencedTableReplicationRequest(
    TDBTableCompositeReplicationRequest.CreateDefault('A22', 'B22')
  );

  CompositeRequest.AddReferencedTableReplicationRequest(
    CompositeReferencedRequest
  );

  CheckTrue(CompositeRequest.AreSourceTargetTablesEquals('A', 'B'));
  CheckEquals(2, CompositeRequest.ReferencedTableReplicationRequests.Count);

  ReferencedRequest :=
    CompositeRequest.
      ReferencedTableReplicationRequests.
        FindReplicationRequestBySourceTargetTables(
          'A1', 'B1'
        );

  CheckNotNull(ReferencedRequest);
  CheckTrue(not (ReferencedRequest is TDBTableCompositeReplicationRequest));
  CheckTrue(ReferencedRequest.AreSourceTargetTablesEquals('A1', 'B1'));

  ReferencedRequest :=
    CompositeRequest.
      ReferencedTableReplicationRequests.
        FindReplicationRequestBySourceTargetTables('A2', 'B2');

  CheckNotNull(ReferencedRequest);
  CheckIs(ReferencedRequest, TDBTableCompositeReplicationRequest);
  CheckTrue(ReferencedRequest.AreSourceTargetTablesEquals('A2', 'B2'));
  
  CompositeReferencedRequest :=
    ReferencedRequest as TDBTableCompositeReplicationRequest;

  CheckEquals(
    2, CompositeReferencedRequest.ReferencedTableReplicationRequests.Count
  );

  ReferencedRequest :=
    CompositeReferencedRequest.
      ReferencedTableReplicationRequests.
        FindReplicationRequestBySourceTargetTables(
          'A21', 'B21'
        );

  CheckNotNull(ReferencedRequest);
  CheckTrue(not (ReferencedRequest is TDBTableCompositeReplicationRequest));
  CheckTrue(ReferencedRequest.AreSourceTargetTablesEquals('A21', 'B21'));

  ReferencedRequest :=
    CompositeReferencedRequest.
      ReferencedTableReplicationRequests.
        FindReplicationRequestBySourceTargetTables(
          'A22', 'B22'
        );

  CheckNotNull(ReferencedRequest);
  CheckIs(ReferencedRequest, TDBTableCompositeReplicationRequest);
  CheckTrue(ReferencedRequest.AreSourceTargetTablesEquals('A22', 'B22'));
  
  CheckEquals(
    0,
    (ReferencedRequest as TDBTableCompositeReplicationRequest).
      ReferencedTableReplicationRequests.Count
  );

end;

procedure TestTDBTableCompositeReplicationRequests.
  RunDuplicateReferencedReplicationRequestAddingUseCase;
var CompositeRequest: TDBTableCompositeReplicationRequest;
begin

  CompositeRequest :=
    FDBTableCompositeReplicationRequests.
      FindReplicationRequestBySourceTargetTables('A', 'B')
      as TDBTableCompositeReplicationRequest;

  CompositeRequest.AddReferencedTableReplicationRequest(
    TDBTableCompositeReplicationRequest.CreateDefault('A22', 'B22')
  );

end;

procedure TestTDBTableCompositeReplicationRequests.
  RunInListReplicationRequestFailedChangingUseCase;
begin

  with FDBTableCompositeReplicationRequests.
          FindReplicationRequestBySourceTargetTables('A22', 'B22')
  do begin

    SourceTable := 'A';
    TargetTable := 'B';
    
  end;
  
end;

procedure TestTDBTableCompositeReplicationRequests.SetUp;
var
  ReferencedTableReplicationRequest: TDBTableReplicationRequest;
  CompositeRequest: TDBTableCompositeReplicationRequest;
  ReferencedRequest: TDBTableReplicationRequest;
  CompositeReferencedRequest: TDBTableCompositeReplicationRequest;
  CompositeReferencedOptions: TDBTableCompositeReplicationOptions;
begin

  FDBTableCompositeReplicationRequests :=
    TDBTableCompositeReplicationRequests.Create;

  CompositeRequest :=
    TDBTableCompositeReplicationRequest.CreateDefault('A', 'B')
    as TDBTableCompositeReplicationRequest;

  ReferencedRequest := TDBTableReplicationRequest.CreateDefault('A1', 'B1');

  CompositeRequest.AddReferencedTableReplicationRequest(ReferencedRequest);

  CompositeReferencedOptions := TDBTableCompositeReplicationOptions.Create;

  CompositeReferencedOptions.CreateTargetTableIfNotExists := True;
  CompositeReferencedOptions.ReplicateReferencedTablesWithReferencingTableOptions := False;
  CompositeReferencedOptions.ReplicateSourceTableIntegrityConstraints := False;
  CompositeReferencedOptions.TruncateTargetTable := True;

  CompositeReferencedRequest :=
    TDBTableCompositeReplicationRequest.Create(
      'A2', 'B2', CompositeReferencedOptions
    );

  CompositeReferencedRequest.AddReferencedTableReplicationRequest(
    TDBTableReplicationRequest.CreateDefault('A21', 'B21')
  );

  CompositeReferencedRequest.AddReferencedTableReplicationRequest(
    TDBTableCompositeReplicationRequest.CreateDefault('A22', 'B22')
  );

  CompositeRequest.AddReferencedTableReplicationRequest(
    CompositeReferencedRequest
  );

  FDBTableCompositeReplicationRequests.Add(CompositeRequest);

end;

procedure TestTDBTableCompositeReplicationRequests.TearDown;
begin
  FDBTableCompositeReplicationRequests.Free;
  FDBTableCompositeReplicationRequests := nil;
end;

procedure TestTDBTableCompositeReplicationRequests.
  TestDuplicateReferencedReplicationRequestAddingUseCase;
begin

  CheckException(
    RunDuplicateReferencedReplicationRequestAddingUseCase,
    TDBTableReplicationRequestException
  );
  
end;

procedure TestTDBTableCompositeReplicationRequests.
  TestFindReplicationRequestBySourceTargetTables;
var
  ReturnValue: TDBTableReplicationRequest;
  TargetTable: string;
  SourceTable: string;
begin

  SourceTable := 'A22'; TargetTable := 'B22';
  
  ReturnValue :=
    FDBTableCompositeReplicationRequests.
      FindReplicationRequestBySourceTargetTables(
        SourceTable, TargetTable
      );

  CheckNotNull(ReturnValue);
  CheckTrue(ReturnValue.AreSourceTargetTablesEquals(SourceTable, TargetTable));

end;

procedure TestTDBTableCompositeReplicationRequests.TestInListReplicationRequestFailedChangingUseCase;
begin

  CheckException(
    RunInListReplicationRequestFailedChangingUseCase,
    TDBTableReplicationRequestException
  );
  
end;

procedure TestTDBTableReplicationRequest.TestSourceTableEqualsTargetTableUseCase;
begin

  CheckException(RunSourceTableEqualsTargetTableUseCase, TDBTableReplicationRequestException);

end;

procedure TestTDBTableReplicationRequest.TestSourceTableIsEmptyUseCase;
begin

  CheckException(RunSourceTableEqualsTargetTableUseCase, TDBTableReplicationRequestException);
  
end;

procedure TestTDBTableReplicationRequest.TestSourceTablePropertyAssignEmptyStringUseCase;
begin

  CheckException(RunSourceTablePropertyAssignEmptyStringUseCase, TDBTableReplicationRequestException);

end;

procedure TestTDBTableReplicationRequest.TestSourceTablePropertyAssignTargetTableStringUseCase;
begin

  CheckException(RunSourceTablePropertyAssignTargetTableStringUseCase, TDBTableReplicationRequestException);
  
end;

procedure TestTDBTableReplicationRequest.TestTargetTableIsEmptyUseCase;
begin

  CheckException(RunTargetTableIsEmptyUseCase, TDBTableReplicationRequestException);
  
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTDBTableReplicationRequest.Suite);
  RegisterTest(TestTDBTableReplicationRequests.Suite);
  RegisterTest(TestTDBTableCompositeReplicationRequest.Suite);
  RegisterTest(TestTDBTableCompositeReplicationRequests.Suite);
end.

