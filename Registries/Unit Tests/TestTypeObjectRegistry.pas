unit TestTypeObjectRegistry;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, TypeObjectRegistry, SysUtils, Hashes, InMemoryObjectRegistry, 
  IGetSelfUnit;
type
  // Test methods for class TTypeObjectRegistry

  TTestTypeA = class

  end;

  TTestTypeB = class (TTestTypeA)

  end;

  TTestTypeC = class (TTestTypeB)

  end;

  TTestObjectA = class

  end;

  TTestObjectB = class (TTestObjectA)

  end;

  TTestObjectC = class (TTestObjectB)

  end;

  TestTTypeObjectRegistry = class(TTestCase)
  strict private
    FTypeObjectRegistry: TTypeObjectRegistry;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published

    procedure TestRegisterObject;

  published
  
    procedure TestUnregisterObject;

  published

    procedure TestGetObject_SearchByNearestAncestorTypeOptionEnabled_AllowObjectUsingByTypeInheritanceEnabled;
    procedure TestGetObject_SearchByNearestAncestorTypeOptionEnabled_AllowObjectUsingByTypeInheritanceDisabled;
    procedure TesGetObject_SearchByNearestAncestorTypeOptionDisabled;

  published
  
    procedure TestGetTypeObjectRegistrationOptions;
  end;

implementation

procedure TestTTypeObjectRegistry.SetUp;
begin

  FTypeObjectRegistry :=
    TTypeObjectRegistry.Create(TInMemoryObjectRegistry.Create);

end;

procedure TestTTypeObjectRegistry.TearDown;
begin
  FTypeObjectRegistry.Free;
  FTypeObjectRegistry := nil;
end;

procedure TestTTypeObjectRegistry.TestUnregisterObject;
begin

  FTypeObjectRegistry.RegisterObject(TTestTypeA, TTestObjectA.Create);

  FTypeObjectRegistry.UnregisterObject(TTestTypeA);

  CheckNull(FTypeObjectRegistry.GetObject(TTestTypeA));
  
end;

procedure TestTTypeObjectRegistry.TesGetObject_SearchByNearestAncestorTypeOptionDisabled;
begin

  FTypeObjectRegistry.UseSearchByNearestAncestorTypeIfTargetObjectNotFound := False;
  
  FTypeObjectRegistry.RegisterObject(TTestTypeA, TTestObjectA.Create);

  CheckNull(FTypeObjectRegistry.GetObject(TTestTypeB));
  
end;

procedure TestTTypeObjectRegistry.
  TestGetObject_SearchByNearestAncestorTypeOptionEnabled_AllowObjectUsingByTypeInheritanceDisabled;
var Options: ITypeObjectRegistrationOptions;
begin

  FTypeObjectRegistry.UseSearchByNearestAncestorTypeIfTargetObjectNotFound := True;

  Options := TTypeObjectRegistrationOptions.Create;

  Options.AllowObjectUsingByTypeInheritance := False;
  
  FTypeObjectRegistry.RegisterObject(TTestTypeA, TTestObjectA.Create, Options);

  CheckNull(FTypeObjectRegistry.GetObject(TTestTypeB));
  
end;

procedure TestTTypeObjectRegistry.
  TestGetObject_SearchByNearestAncestorTypeOptionEnabled_AllowObjectUsingByTypeInheritanceEnabled;
var Options: ITypeObjectRegistrationOptions;
    TestObjectA: TTestObjectA;
begin

  FTypeObjectRegistry.UseSearchByNearestAncestorTypeIfTargetObjectNotFound := True;

  Options := TTypeObjectRegistrationOptions.Create;

  Options.AllowObjectUsingByTypeInheritance := True;

  TestObjectA := TTestObjectA.Create;

  FTypeObjectRegistry.RegisterObject(TTestTypeA, TestObjectA, Options);

  CheckSame(FTypeObjectRegistry.GetObject(TTestTypeB), TestObjectA);
  
end;

procedure TestTTypeObjectRegistry.TestGetTypeObjectRegistrationOptions;
var
  ReturnValue: ITypeObjectRegistrationOptions;
  RelatedType: TClass;
begin

  RelatedType := TTestTypeA;

  ReturnValue := TTypeObjectRegistrationOptions.Create;
  
  FTypeObjectRegistry.RegisterObject(RelatedType, TTestObjectA.Create, ReturnValue);
  
  CheckSame(FTypeObjectRegistry.GetTypeObjectRegistrationOptions(RelatedType), ReturnValue);

end;

procedure TestTTypeObjectRegistry.TestRegisterObject;
var TestTypeBRegistrationOptions: ITypeObjectRegistrationOptions;
    TestObjectA: TTestObjectA;
    TestObjectB: TTestObjectB;
begin

  TestObjectA := TTestObjectA.Create;
  TestObjectB := TTestObjectB.Create;
  
  TestTypeBRegistrationOptions := TTypeObjectRegistrationOptions.Create;

  TestTypeBRegistrationOptions.AllowObjectUsingByTypeInheritance := True;

  FTypeObjectRegistry.RegisterObject(TTestTypeA, TestObjectA);

  CheckSame(FTypeObjectRegistry.GetObject(TTestTypeA), TestObjectA, 'GetObject(TTestTypeA) <> TestObjectA');
  CheckFalse(FTypeObjectRegistry.GetTypeObjectRegistrationOptions(TTestTypeA).AllowObjectUsingByTypeInheritance);

  FTypeObjectRegistry.RegisterObject(TTestTypeB, TestObjectB, TestTypeBRegistrationOptions);

  CheckSame(FTypeObjectRegistry.GetObject(TTestTypeB), TestObjectB, 'GetObject(TTestTypeB) <> TestObjectB');
  CheckSame(FTypeObjectRegistry.GetTypeObjectRegistrationOptions(TTestTypeB), TestTypeBRegistrationOptions);

  FTypeObjectRegistry.RegisterObject(TTestTypeB, TestObjectA);

  CheckSame(FTypeObjectRegistry.GetObject(TTestTypeB), TestObjectA, 'GetObject(TTestTypeB) <> TestObjectA');
  CheckFalse(FTypeObjectRegistry.GetTypeObjectRegistrationOptions(TTestTypeB).AllowObjectUsingByTypeInheritance);

  FTypeObjectRegistry.RegisterObject(TTestTypeA, TestObjectB, TestTypeBRegistrationOptions);

  CheckSame(FTypeObjectRegistry.GetObject(TTestTypeA), TestObjectB, 'GetObject(TTestTypeA) <> TestObjectB');
  CheckSame(FTypeObjectRegistry.GetTypeObjectRegistrationOptions(TTestTypeA), TestTypeBRegistrationOptions);

end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTTypeObjectRegistry.Suite);
end.

